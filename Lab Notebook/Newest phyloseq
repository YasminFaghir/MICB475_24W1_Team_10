library(tidyverse)
library(dplyr)


wetlands_data <- read.delim(file = "wetlands_meta.txt", sep = "\t")


# Categorizing variables of pH, Ca, total N, total C, respiration
wl_mutated <- wetlands_data |>
  mutate(ph = case_when(
    ph > 7.2 ~ "basic",
    ph >= 6.7 & ph <= 7.2 ~ "neutral",
    ph < 6.7 ~ "acidic" 
  )) |>
  mutate(calcium = case_when(
    calcium > 10 ~ "medium",
    calcium <= 10 ~ "low"
  )) |>
  mutate(total_nitrogen_percent = case_when(
    total_nitrogen_percent > 0.5 ~ "high",
    total_nitrogen_percent <= 0.5 ~ "low"
  ))  |>
  mutate(total_carbon_percent = case_when(
    total_carbon_percent > 10 ~ "medium",
    total_carbon_percent <= 10 ~ "low"
  )) |>
  mutate(respiration = case_when(
    respiration > 240 ~ "high",
    respiration <= 240 ~ "low"
  ))

save(wl_mutated, file="wl_data.RData")

# Creating phyloseq 
# Load the required packages
library(phyloseq)
library(data.table)  # Efficiently handles large TSV files
library(ape)  # For handling phylogenetic trees

# 1. Load sample metadata and fix sample IDs
load("wl_data.RData")  # Loads sample_metadata (among other objects, if any)
class(wl_mutated)
# Ensure sample_metadata has sample IDs as row names
# (If there's no explicit SampleID column, we use feature_table to get sample names)
feature_table <- read.table("wetlands_export/table_export/feature-table.tsv", header = TRUE, sep = "\t")
sample_ids <- colnames(feature_table)[-1]    # exclude the first column name which is likely "OTU" or similar
# If sample_metadata has the same number of rows as samples, assign row names
if (nrow(wl_mutated) == length(sample_ids)) {
  rownames(wl_mutated) <- sample_ids
} else {
  stop("Number of samples in metadata does not match number of sample columns in feature table.")
}
# (Optional) If needed, add SampleID column in metadata for clarity
# sample_metadata$SampleID <- rownames(sample_metadata)

# 2. Format feature table as OTU table
# If the first column is OTU IDs, set them as row names and remove that column
rownames(feature_table) <- feature_table[[1]]
feature_table <- feature_table[ , -1]
# Convert to matrix and create otu_table
otu_mat <- as.matrix(feature_table)
otu_table_obj <- otu_table(otu_mat, taxa_are_rows = TRUE)

# 3. Read and format taxonomy table (keeping Taxon string intact)
taxonomy_df <- read.table("wetlands_export/taxonomy_export/taxonomy.tsv", header = TRUE, sep = "\t", row.names = 1)
# At this point, taxonomy_df has row names as feature IDs and a column (or columns) for taxonomy
# Convert taxonomy dataframe to matrix for phyloseq
tax_mat <- as.matrix(taxonomy_df)
tax_table_obj <- tax_table(tax_mat)

# 4. Create sample_data object and merge everything into phyloseq
sample_data_obj <- sample_data(wl_mutated)
physeq <- phyloseq(otu_table_obj, tax_table_obj, sample_data_obj)

class(physeq)
# The phyloseq object 'physeq' now contains the OTU table, taxonomy, and sample metadata.
# You can save or use 'physeq' for further analysis (e.g., phyloseq::merge_phyloseq, alpha/beta diversity, etc.).


# Lets Print the sample_data(physeq):
sample_data(physeq)

# Check the sample variables and names:
sample_variables(physeq)

save(physeq, file="physeq_wl.RData")
